import time
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

def get_filters():
    print('Hello! Let\'s explore some US bikeshare data!')
    while True:
        try:
            city = str(input('Please enter the name of the city you want to look into: ')).lower()
            if city in ['chicago', 'new york city', 'washington']:
                break
            else:
                print('That\s not a valid name, only Chicago, New York City and Wasington are avilable, please try again..')
        except:
            print('That\'s not a valid name, please try again..')

    while True:
        try:
            month = str(input('Please enter the month you want to look into, enter \'all\' if you don\'t want this filter: ')).lower()
            if month in ['all', 'january', 'february', 'march', 'april', 'may', 'june']:
                break
            else:
                print('That\s not a valid name, note only first 6 monthes are avilable,  please try again..')
        except:
            print('That\s not a valid name, please try again..')

    while True:
        try:
            day = str(input('Please enter a number of the day of week you want to look into, enter \'all\' if you don\'t want this filter: ')).lower()
            if day in ['all', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']:
                break
            else:
                print('That\s not a valid date, please try again..')
        except:
            print('That\s not a valid name, please try again..')

    print('-'*40)
    return city, month, day


def load_data(city, month, day):
    df = pd.read_csv(CITY_DATA[city])
    df['Start Time'] = pd.to_datetime(df['Start Time'])
    df['month'] = df['Start Time'].dt.month
    df['day_of_week'] = df['Start Time'].dt.weekday_name
    #filter by month
    if month != 'all':
        months = ['january', 'february', 'march', 'april', 'may', 'june']
        month = months.index(month) + 1
        df = df[df['month'] == month]
        
    #filter by day   
    if day != 'all':
        df = df[df['day_of_week'] == day.title()]
    return df


def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()
    #month
    df['month'] = df['Start Time'].dt.month
    popular_month = df['month'].mode()[0]
    print('Most Popular month:', popular_month)
    #day
    df['day of week'] = df['Start Time'].dt.weekday
    popular_weekday = df['day of week'].mode()[0]
    print('Most Popular day of week:', popular_weekday)
    #hour
    df['hour'] = df['Start Time'].dt.hour
    popular_hour = df['hour'].mode()[0]
    print('Most Popular Start Hour:', popular_hour)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    #display most commonly used start station
    popular_start = df['Start Station'].mode()[0]
    print('Most popular start station: ', popular_start)
    #display most commonly used end station
    popular_end = df['End Station'].mode()[0]
    print('Most popular end station: ', popular_end)
    #display most frequent combination of start station and end station trip
    print('Most frequent combination of start and end station trip is:', popular_start, ' to ', popular_end)

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    #display total travel time
    total_time = df['Trip Duration'].sum()
    print('Total travel time: ', total_time)
    #display mean travel time
    mean_time = df['Trip Duration'].mean()
    print('Average travel time: ', mean_time)
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df):
    """Displays statistics on bikeshare users."""
    print('\nCalculating User Stats...\n')
    start_time = time.time()
    #Display counts of user types
    print('\nUser type...\n')
    types = df['User Type'].value_counts()
    print(types)
    #Display counts of gender
    print('\nUser gender...\n')
    if 'Gender' in df.columns:
        gender = df['Gender'].value_counts()
        print(gender)
        unkwon = df['Gender'].isnull().sum()
        print(unkwon,' users havn\'t left a gender infomation')
    else:
        print('Gender information hasn\'t been collected yet for this city...')
 
    #Display earliest, most recent, and most common year of birth
    print('\nUser birth year...\n')
    if 'Birth Year' in df.columns:
        print('The most recent year of birth is ', df['Birth Year'].max())
        print('The earlist year of birth is ', df['Birth Year'].min())
        unkwon_year = df['Birth Year'].isnull().sum()
        print(unkwon_year,' users havn\'t left a birht year infomation')
    else:
        print('Birth year information hasn\'t been collected yet for this city...')

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)

        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df)

        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
	main()
